// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server.proto

package server

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// StreamError is a response type which is returned when
// streaming rpc returns an error.
type StreamError struct {
	GrpcCode   int32        `protobuf:"varint,1,opt,name=grpc_code,json=grpcCode,proto3" json:"grpc_code,omitempty"`
	HttpCode   int32        `protobuf:"varint,2,opt,name=http_code,json=httpCode,proto3" json:"http_code,omitempty"`
	Message    string       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	HttpStatus string       `protobuf:"bytes,4,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
	Details    []*types.Any `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
}

func (m *StreamError) Reset()      { *m = StreamError{} }
func (*StreamError) ProtoMessage() {}
func (*StreamError) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}
func (m *StreamError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamError.Merge(m, src)
}
func (m *StreamError) XXX_Size() int {
	return m.Size()
}
func (m *StreamError) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamError.DiscardUnknown(m)
}

var xxx_messageInfo_StreamError proto.InternalMessageInfo

func (m *StreamError) GetGrpcCode() int32 {
	if m != nil {
		return m.GrpcCode
	}
	return 0
}

func (m *StreamError) GetHttpCode() int32 {
	if m != nil {
		return m.HttpCode
	}
	return 0
}

func (m *StreamError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StreamError) GetHttpStatus() string {
	if m != nil {
		return m.HttpStatus
	}
	return ""
}

func (m *StreamError) GetDetails() []*types.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamError)(nil), "server.StreamError")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8e, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0xfd, 0x28, 0x6d, 0xa9, 0xcb, 0x14, 0x31, 0x18, 0x90, 0x1e, 0x11, 0x53, 0x26, 0x57,
	0x02, 0x2e, 0x00, 0x88, 0x0b, 0xa4, 0x07, 0x40, 0x6e, 0xf3, 0x08, 0x48, 0x6d, 0x1d, 0xd9, 0x2e,
	0x52, 0x37, 0x8e, 0xc0, 0x31, 0x98, 0x39, 0x05, 0x63, 0xc6, 0x8e, 0xc4, 0x59, 0x18, 0x7b, 0x04,
	0x14, 0x5b, 0x19, 0xff, 0xef, 0xfb, 0xdf, 0xd3, 0xcf, 0x4f, 0x2d, 0x99, 0x77, 0x32, 0xb2, 0x32,
	0xda, 0xe9, 0x64, 0x14, 0xd3, 0xc5, 0x79, 0xa9, 0x75, 0xb9, 0xa2, 0x59, 0xa0, 0x8b, 0xed, 0xcb,
	0x4c, 0x6d, 0x76, 0xb1, 0x72, 0xfd, 0x0d, 0x7c, 0x3a, 0x77, 0x86, 0xd4, 0xfa, 0xc9, 0x18, 0x6d,
	0x92, 0x4b, 0x3e, 0x29, 0x4d, 0xb5, 0x7c, 0x5e, 0xea, 0x82, 0x04, 0xa4, 0x90, 0x0d, 0xf3, 0x93,
	0x0e, 0x3c, 0xea, 0x82, 0x3a, 0xf9, 0xea, 0x5c, 0x15, 0xe5, 0x51, 0x94, 0x1d, 0x08, 0x52, 0xf0,
	0xf1, 0x9a, 0xac, 0x55, 0x25, 0x89, 0x41, 0x0a, 0xd9, 0x24, 0xef, 0x63, 0x72, 0xc5, 0xa7, 0xe1,
	0xcc, 0x3a, 0xe5, 0xb6, 0x56, 0x1c, 0x07, 0xcb, 0x3b, 0x34, 0x0f, 0x24, 0x91, 0x7c, 0x5c, 0x90,
	0x53, 0x6f, 0x2b, 0x2b, 0x86, 0xe9, 0x20, 0x9b, 0xde, 0x9c, 0xc9, 0xb8, 0x58, 0xf6, 0x8b, 0xe5,
	0xfd, 0x66, 0x97, 0xf7, 0xa5, 0x87, 0xbb, 0xba, 0x41, 0xb6, 0x6f, 0x90, 0x1d, 0x1a, 0x84, 0x0f,
	0x8f, 0xf0, 0xe5, 0x11, 0x7e, 0x3c, 0x42, 0xed, 0x11, 0x7e, 0x3d, 0xc2, 0x9f, 0x47, 0x76, 0xf0,
	0x08, 0x9f, 0x2d, 0xb2, 0xba, 0x45, 0xb6, 0x6f, 0x91, 0x2d, 0x46, 0xe1, 0xd9, 0xed, 0x7f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x74, 0x62, 0xe7, 0xcb, 0x24, 0x01, 0x00, 0x00,
}

func (this *StreamError) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamError)
	if !ok {
		that2, ok := that.(StreamError)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GrpcCode != that1.GrpcCode {
		return false
	}
	if this.HttpCode != that1.HttpCode {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.HttpStatus != that1.HttpStatus {
		return false
	}
	if len(this.Details) != len(that1.Details) {
		return false
	}
	for i := range this.Details {
		if !this.Details[i].Equal(that1.Details[i]) {
			return false
		}
	}
	return true
}
func (this *StreamError) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&server.StreamError{")
	s = append(s, "GrpcCode: "+fmt.Sprintf("%#v", this.GrpcCode)+",\n")
	s = append(s, "HttpCode: "+fmt.Sprintf("%#v", this.HttpCode)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "HttpStatus: "+fmt.Sprintf("%#v", this.HttpStatus)+",\n")
	if this.Details != nil {
		s = append(s, "Details: "+fmt.Sprintf("%#v", this.Details)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringServer(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StreamError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GrpcCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.GrpcCode))
	}
	if m.HttpCode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServer(dAtA, i, uint64(m.HttpCode))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.HttpStatus) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServer(dAtA, i, uint64(len(m.HttpStatus)))
		i += copy(dAtA[i:], m.HttpStatus)
	}
	if len(m.Details) > 0 {
		for _, msg := range m.Details {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintServer(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StreamError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GrpcCode != 0 {
		n += 1 + sovServer(uint64(m.GrpcCode))
	}
	if m.HttpCode != 0 {
		n += 1 + sovServer(uint64(m.HttpCode))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	l = len(m.HttpStatus)
	if l > 0 {
		n += 1 + l + sovServer(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovServer(uint64(l))
		}
	}
	return n
}

func sovServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServer(x uint64) (n int) {
	return sovServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StreamError) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDetails := "[]*Any{"
	for _, f := range this.Details {
		repeatedStringForDetails += strings.Replace(fmt.Sprintf("%v", f), "Any", "types.Any", 1) + ","
	}
	repeatedStringForDetails += "}"
	s := strings.Join([]string{`&StreamError{`,
		`GrpcCode:` + fmt.Sprintf("%v", this.GrpcCode) + `,`,
		`HttpCode:` + fmt.Sprintf("%v", this.HttpCode) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`HttpStatus:` + fmt.Sprintf("%v", this.HttpStatus) + `,`,
		`Details:` + repeatedStringForDetails + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringServer(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StreamError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcCode", wireType)
			}
			m.GrpcCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpcCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpCode", wireType)
			}
			m.HttpCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HttpStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthServer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &types.Any{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthServer
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthServer
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServer   = fmt.Errorf("proto: integer overflow")
)
